{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\web\\\\ArtHive\\\\client\\\\src\\\\scenes\\\\widgets\\\\PostsWidget.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostsWidget = _ref => {\n  _s();\n  let {\n    userId,\n    isProfile = false\n  } = _ref;\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  const token = useSelector(state => state.token);\n  const getPosts = async () => {\n    const response = await fetch(\"http://localhost:3001/posts\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  const getUserPosts = async () => {\n    const response = await fetch(`http://localhost:3001/posts/${userId}/posts`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    dispatch(setPosts({\n      posts: data\n    }));\n  };\n  const handleDeletePost = async postId => {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        dispatch(deletePost(postId));\n      } else {\n        // Handle error response\n        // (e.g., display an error message, handle authorization issues)\n      }\n    } catch (error) {\n      console.log(\"Error deleting post:\", error);\n    }\n  };\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.map(_ref2 => {\n      let {\n        _id,\n        userId,\n        firstName,\n        lastName,\n        description,\n        location,\n        picturePath,\n        userPicturePath,\n        likes,\n        comments\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(PostWidget, {\n        postId: _id,\n        postUserId: userId,\n        name: `${firstName} ${lastName}`,\n        description: description,\n        location: location,\n        picturePath: picturePath,\n        userPicturePath: userPicturePath,\n        likes: likes,\n        comments: comments,\n        onDelete: handleDeletePost\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(PostsWidget, \"7TqOh3V0nCSP3QUJlbitnmq7L8o=\", true);\n_c = PostsWidget;\nexport default PostsWidget;\nvar _c;\n$RefreshReg$(_c, \"PostsWidget\");","map":{"version":3,"names":["PostsWidget","_ref","_s","userId","isProfile","dispatch","useDispatch","posts","useSelector","state","token","getPosts","response","fetch","method","headers","Authorization","data","json","setPosts","getUserPosts","handleDeletePost","postId","ok","deletePost","error","console","log","useEffect","_jsxDEV","_Fragment","children","map","_ref2","_id","firstName","lastName","description","location","picturePath","userPicturePath","likes","comments","PostWidget","postUserId","name","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/web/ArtHive/client/src/scenes/widgets/PostsWidget.jsx"],"sourcesContent":["const PostsWidget = ({ userId, isProfile = false }) => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.posts);\n  const token = useSelector((state) => state.token);\n\n  const getPosts = async () => {\n    const response = await fetch(\"http://localhost:3001/posts\", {\n      method: \"GET\",\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    const data = await response.json();\n    dispatch(setPosts({ posts: data }));\n  };\n\n  const getUserPosts = async () => {\n    const response = await fetch(\n      `http://localhost:3001/posts/${userId}/posts`,\n      {\n        method: \"GET\",\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n    const data = await response.json();\n    dispatch(setPosts({ posts: data }));\n  };\n  \n  const handleDeletePost = async (postId) => {\n    try {\n      const response = await fetch(`http://localhost:3001/posts/${postId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n  \n      if (response.ok) {\n        dispatch(deletePost(postId));\n      } else {\n        // Handle error response\n        // (e.g., display an error message, handle authorization issues)\n      }\n    } catch (error) {\n      console.log(\"Error deleting post:\", error);\n    }\n  };\n  \n\n  useEffect(() => {\n    if (isProfile) {\n      getUserPosts();\n    } else {\n      getPosts();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      {posts.map(\n        ({\n          _id,\n          userId,\n          firstName,\n          lastName,\n          description,\n          location,\n          picturePath,\n          userPicturePath,\n          likes,\n          comments,\n        }) => (\n          <PostWidget\n            key={_id}\n            postId={_id}\n            postUserId={userId}\n            name={`${firstName} ${lastName}`}\n            description={description}\n            location={location}\n            picturePath={picturePath}\n            userPicturePath={userPicturePath}\n            likes={likes} \n            comments={comments}\n            onDelete={handleDeletePost}\n          />\n        )\n      )}\n    </>\n  );\n};\n\n\n\nexport default PostsWidget;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}